#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#define MAX_PENDING 5
#define MAX_COMMAND 256
#define MAX_FILE_MESSAGE 512

int main(int argc, char * argv[]){
	struct sockaddr_in sin;
	char buf[MAX_COMMAND];
	int len;
	int s, new_s1, new_s2, new_s3;
	int opt;
	int server_port;
	
	//Input Arugment Error Checking
	if(argc == 2){
		server_port = atoi(argv[1]);		
	} else {
		printf("Please run the server using the following command after compiling: ./myftpd <port_number>\n");
		exit(1);
	}

	/*build address data structure*/
	bzero((char *)&sin, sizeof(sin));
	sin.sin_family = AF_INET;
	sin.sin_addr.s_addr = INADDR_ANY;
	sin.sin_port = htons(server_port);
	
	/*setup passive open*/
	if((s = socket(PF_INET, SOCK_STREAM, 0)) < 0){
		perror("simplex-talk: socket");
		exit(1);
	}
	
	/*Set socket option*/
	if((setsockopt(s, SOL_SOCKET, SO_REUSEADDR, (char *)&opt, sizeof(int)))<0){
		perror("simplex-talk:socket");
		exit(1);
	}
	if((bind(s,(struct sockaddr *)&sin, sizeof(sin)))<0){
		perror("simplex-talk: bind");
		exit(1);
	}
	if((listen(s,MAX_PENDING))<0){
		perror("simplex-talk:listen");
		exit(1);
	}
	printf("Welcome to the TCP Server\n");

	//Waiting for the connection and then acting
	while(1){
		if((new_s1 = accept(s,(struct sockaddr *)&sin, &len))<0){
			perror("Server Received Error!");
			exit(1);
		}

		if(len==0) break;

		if(strcmp("REQ", buf) == 0){
			//Sending a prompt back to the client to enter a file name for the request
			char *file_message = "Please enter the name of the file that you would like to request";
			if(send(s, file_message, sizeof(file_message), 0)==-1){ 
				perror("server send file prompt error!"); 
				exit(1);
			}
 
			//accepting the name of the file
			if((new_s2 = accept(s,(struct sockaddr *)&sin, &len))<0){
				perror("Server Received Error!");
				exit(1);
			}

			//Server receiving the length of the file in a short int as well as the file name
			//
		}else if(strcmp("UPL", buf) == 0){

		}else if(strcmp("LIS", buf) == 0){

		}else if(strcmp("DIR", buf) == 0){

		}else if(strcmp("RMD", buf) == 0){

		}else if(strcmp("CHD", buf) == 0){

		}else if(strcmp("DEL", buf) == 0){

		}else if(strcmp("XIT", buf) == 0){

		} else {
			char *command_error_message = "Please enter a valid command for this client/server";
			if(send(s, command_error_message, sizeof(command_error_message), 0)==-1){ 
				perror("server send command error message error!"); 
				exit(1);
			}
		}
		
		close(new_s1);
		close(new_s2);
	}
}
